(i., ii.) Παίρνω τα αρχεία από το /tmp/lab04 (mv /tmp/lab04/example*.c .) και μαζί το Makefile. Για να τα τρέξω μπορώ να χρησιμοποιήσω την εντολή make ή αν δεν θέλω να χρησιμοποιήσω το Makefile, τότε μπορώ να κάνω "gcc example1.c -o example1", όπου το 1 το αντικαθιστώ για κάθε νούμερο αρχείου. Για πιο γενική εντολή, μπορούμε να το τρέξουμε με for loop: 
for i in {1..5}; do gcc example$i.c -o example$i; done

To output της εντολής make είναι:
gcc -Wall -g -o example1 example1.c gcc -Wall -g -o example2 example2.c gcc -Wall -g -o example3 example3.c gcc -Wall -g -o example4 example4.c gcc -Wall -g -o example5 example5.c

και παράγει τα εκτελέσιμα αρχεία. Για να τρέξω τα εκτελέσιμα αρχεία μπορώ να κάνω:
./example1
./example2
./example3
./example4
./example5

και παίρνω ως output (δειγματικά για τα example1 και example2):

example1
>>>>>>>>
total 128
-rwxrwxr-x 1 gsklaven gsklaven 19920 Dec 16 16:21 example1
-rw-rw-r-- 1 gsklaven gsklaven   855 Dec 16 15:09 example1.c
-rwxrwxr-x 1 gsklaven gsklaven 19592 Dec 16 16:21 example2
-rw-rw-r-- 1 gsklaven gsklaven   347 Dec 16 15:09 example2.c
-rwxrwxr-x 1 gsklaven gsklaven 19936 Dec 16 16:21 example3
-rw-rw-r-- 1 gsklaven gsklaven   643 Dec 16 15:09 example3.c
-rwxrwxr-x 1 gsklaven gsklaven 19936 Dec 16 16:21 example4
-rw-rw-r-- 1 gsklaven gsklaven   670 Dec 16 15:09 example4.c
-rwxrwxr-x 1 gsklaven gsklaven 20264 Dec 16 16:21 example5
-rw-rw-r-- 1 gsklaven gsklaven  1622 Dec 16 15:09 example5.c
-rw-rw-r-- 1 gsklaven gsklaven   564 Dec 16 15:10 Makefile
-rw-rw-r-- 1 gsklaven gsklaven  1099 Dec 16 16:28 report.txt
Parent Process: PID = 3074631, Created Child PID = 3074632
Parent Process: Child has terminated.

example2
>>>>>>>
Current Process ID (PID): 3074633
Parent Process ID (PPID): 3074227

(iii.) 
1. Example1: Το πρόγραμμα δημιουργεί ένα child process με την χρήση του fork(), ελέγχει αν δημιουργήθηκε επιτυχώς (Το child process πρέπει να έχει PID = 0) και το child processs εκτελεί την εντολή ls -l μέσω της execlp(). Όταν εκτελέσει το πρόγραμμα το child process, τερματίζει και έπειτα τερματίζει και το parent process. 
2. Example2: Το πρόγραμμα εμφανίζει το PID της τρέχουσας (child) διεργασίας και της μητρικής (parent).
3. Example3: Το πρόγραμμα αναμένει να πατηθεί το Ctrl + C για να σταματήσει η διεργασία. Ορίζεται μια συνάρτηση η οποία κάνει exit το πρόγραμμα και καλείται μέσα στην main όταν αναγνωριστεί ότι πατήθηκε το αναμενόμενο signal (Ctrl + C).
4. Example4: To πρόγραμμα αυτή την φορά αναμένει να πατηθεί το Ctrl + C για να σταματήσει η διεργασία, αλλά στην συνάρτηση που ορίζεται το κόψιμο της διεργασίας, δεν υλοποιείται, με αποτέλεσμα όταν καλείται μέσα στην main όταν αναγνωριστεί ότι πατήθηκε το signal (Ctrl + C) να μην σταματάει ποτέ.
5. Example5: Η μητρική διεργασία (parent) δημιουργεί ένα child process με την εντολή fork(), ελέγχει αν δημιουργήθηκε και αν δημιουργήθηκε επιτυχώς (Το child process πρέπει να έχει PID = 0) του στέλνει τα σήματα SIGURS1 και SIGTERM, για να το τερματίσει και μετά να τερματίσει η ίδια. 

